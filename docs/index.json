[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/events.mjs",
    "content": "/**\n * Class-based EventEmitter for managing custom events with pInstance-specific tracking.\n */\nexport class EventEmitter {\n    /**\n     * Map to store event listeners by pInstance and event type.\n     * @type {WeakMap<object, Map<string, Set<Function>>>}\n     */\n    events;\n\n    constructor() {\n        this.events = new WeakMap();\n    }\n\n    /**\n     * Registers a listener for a specified event on a specific pInstance.\n     *\n     * @param {object} pInstance - The instance to associate the event with.\n     * @param {string} pEventName - The name of the event.\n     * @param {Function} pListener - The function to invoke when the event is triggered.\n     */\n    on(pInstance, pEventName, pListener) {\n        if (!this.events.has(pInstance)) {\n            this.events.set(pInstance, new Map());\n        }\n        const instanceEvents = this.events.get(pInstance);\n        if (!instanceEvents.has(pEventName)) {\n            instanceEvents.set(pEventName, new Set());\n        }\n        instanceEvents.get(pEventName).add(pListener);\n    }\n\n    /**\n     * Unregisters a listener for a specified event on a specific pInstance.\n     *\n     * @param {object} pInstance - The instance to disassociate the event from.\n     * @param {string} pEventName - The name of the event.\n     * @param {Function} pListener - The function to remove from the event.\n     */\n    off(pInstance, pEventName, pListener) {\n        if (this.events.has(pInstance)) {\n            const instanceEvents = this.events.get(pInstance);\n            if (instanceEvents.has(pEventName)) {\n                instanceEvents.get(pEventName).delete(pListener);\n                // Clean up the event if no listeners remain\n                if (instanceEvents.get(pEventName).size === 0) {\n                    instanceEvents.delete(pEventName);\n                }\n            }\n            // Clean up the pInstance if no events remain\n            if (instanceEvents.size === 0) {\n                this.events.delete(pInstance);\n            }\n        }\n    }\n\n    /**\n     * Triggers a specified event on a specific pInstance, invoking all registered listeners.\n     *\n     * @param {object} pInstance - The instance to trigger the event on.\n     * @param {string} pEventName - The name of the event.\n     * @param {object} [pData] - The data to pass to the event listeners.\n     */\n    emit(pInstance, pEventName, pData) {\n        if (this.events.has(pInstance)) {\n            const instanceEvents = this.events.get(pInstance);\n            if (instanceEvents.has(pEventName)) {\n                instanceEvents.get(pEventName).forEach((pListener) => {\n                    try {\n                        pListener({\n                            pInstance,\n                            event: pEventName,\n                            pData\n                        });\n                    } catch (error) {\n                        console.error(`Error in ${pEventName} pListener:`, error);\n                    }\n                });\n            }\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/doubleactii/Documents/Github/Parallax/src/events.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "EventEmitter",
    "memberof": "src/events.mjs",
    "static": true,
    "longname": "src/events.mjs~EventEmitter",
    "access": "public",
    "export": true,
    "importPath": "parallax/src/events.mjs",
    "importStyle": "{EventEmitter}",
    "description": "Class-based EventEmitter for managing custom events with pInstance-specific tracking.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "events",
    "memberof": "src/events.mjs~EventEmitter",
    "static": false,
    "longname": "src/events.mjs~EventEmitter#events",
    "access": "public",
    "description": "Map to store event listeners by pInstance and event type.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap<object, Map<string, Set<Function>>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events.mjs~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.mjs~EventEmitter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "on",
    "memberof": "src/events.mjs~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.mjs~EventEmitter#on",
    "access": "public",
    "description": "Registers a listener for a specified event on a specific pInstance.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to associate the event with."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pEventName",
        "description": "The name of the event."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pListener",
        "description": "The function to invoke when the event is triggered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "off",
    "memberof": "src/events.mjs~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.mjs~EventEmitter#off",
    "access": "public",
    "description": "Unregisters a listener for a specified event on a specific pInstance.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to disassociate the event from."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pEventName",
        "description": "The name of the event."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pListener",
        "description": "The function to remove from the event."
      }
    ],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "emit",
    "memberof": "src/events.mjs~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.mjs~EventEmitter#emit",
    "access": "public",
    "description": "Triggers a specified event on a specific pInstance, invoking all registered listeners.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to trigger the event on."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pEventName",
        "description": "The name of the event."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "pData",
        "description": "The data to pass to the event listeners."
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/layer.mjs",
    "content": "import { Parallax } from './parallax.mjs';\n\nexport class Layer {\n    /**\n     * The configuration object of this layer.\n     * @private\n     * @type {Object}\n     * @param {number} horizontalSpeed - The horizontal speed of the layer.\n     * @param {number} verticalSpeed - The vertical speed of the layer.\n     * @param {number} plane - The plane this parallax layer will occupy.\n     * @param {Diob[] | MapObject[]} backgrounds - An array of instances that will serve as the background. These are automatically toggled to repeat.\n     * @param {Set} instances - A set of instances currently on the layer.\n     */\n    config = {\n        // Move the instance with the camera if the parallax is set to 0\n        horizontalSpeed: 0,\n        verticalSpeed: 0,\n        plane: 1,\n        backgrounds: new Set(),\n        instances: new Set()\n    }\n    /**\n     * Creates a new Parallax layer with the supplied configuration.\n     * When creating a layer, all instances and backgrounds should already be on the map.\n     * @param {Object} pConfig - The configuration of the parallax layer.\n     * @prop {number} [pConfig.horizontalSpeed] - The horizontal speed of the layer.\n     * @prop {number} [pConfig.verticalSpeed] - The vertical speed of the layer. \n     * @prop {number} pConfig.plane - The plane this layer will occupy.\n     * @prop {boolean} [pConfig.infiniteHorizontal] - Whether the layer will loop infinitely horizontally.\n     * @prop {boolean} [pConfig.infiniteVertical] - Whether the layer will loop infinitely vertically.\n     * @prop {number} [pConfig.cameraAnchorX] - The x position of the camera to anchor this instance to.\n     * @prop {number} [pConfig.cameraAnchorY] - The y position of the camera to anchor this instance to.\n     * @prop {number} [pConfig.groundY] - The y pos of the ground.\n     * @param {Diob[] | MapObject[]} pConfig.backgrounds - An array of instances that will serve as the background. These are automatically toggled to repeat.\n     * @prop {Diob[] | MapObject[]} pConfig.instances - The instances that will be added to the layer. \n     * @prop {Diob | MapObject} [pConfig.ground] - The ground that will be added to the layer.\n     * @prop {string} [pConfig.groundMapname] - The ground mapname. \n     */\n    constructor(pConfig) {\n        this.updateConfigSpeed(pConfig, true);\n\n        if (!typeof pConfig.plane === 'number') {\n            Parallax.logger.prefix('Parallax-Module').warn('Expected a number for \"pConfig.plane\", but received:', typeof pConfig.plane, '\\n Default plane of \"1\" used.');\n        } else {\n            this.config.plane = pConfig.plane;\n        }\n\n        const instanceConfig = {\n            horizontalSpeed: this.config.horizontalSpeed,\n            verticalSpeed: this.config.verticalSpeed,\n            cameraAnchorX: pConfig.cameraAnchorX,\n            cameraAnchorY: pConfig.cameraAnchorY\n        }\n\n        if (Array.isArray(pConfig.instances)) {\n            pConfig.instances.forEach(pInstance => {\n                pInstance.plane = this.config.plane;\n                this.add(pInstance, instanceConfig);\n            });\n        }\n\n        if (Array.isArray(pConfig.backgrounds)) {\n            pConfig.backgrounds.forEach(pInstance => {\n                pInstance.plane = this.config.plane;\n                this.add(pInstance, { ...instanceConfig, infiniteHorizontal: pConfig.infiniteHorizontal, infiniteVertical: pConfig.infiniteVertical });\n            });\n        }\n\n        if (pConfig.ground) {\n            pConfig.ground.plane = this.config.plane;\n            this.add(pConfig.ground, { ...instanceConfig, infiniteHorizontal: pConfig.infiniteHorizontal, infiniteVertical: pConfig.infiniteVertical, ground: true, groundY: pConfig.groundY, groundMapname: pConfig.groundMapname });\n        }\n    }\n    /**\n     * Updates the configuration speed of the layer.\n     * @param {Object} pConfig - The speed configuration of the parallax layer.\n     * @prop {number} pConfig.horizontalSpeed - The horizontal speed of the layer.\n     * @prop {number} pConfig.verticalSpeed - The vertical speed of the layer. \n     * @param {boolean} pUpdateLayerConfigOnly - If only to update the layer config and not the instance config.\n     */\n    updateConfigSpeed(pConfig, pUpdateLayerConfigOnly) {\n        this.updateHorizontalSpeed(pConfig.horizontalSpeed, pUpdateLayerConfigOnly);\n        this.updateVerticalSpeed(pConfig.verticalSpeed, pUpdateLayerConfigOnly);\n    }\n    /**\n     * Updates the horizontal speed of this layer.\n     * @param {number} pHorizontalSpeed - The new horizontal speed.\n     * @param {boolean} pUpdateLayerConfigOnly - If only to update the layer config and not the instance config.\n     */\n    updateHorizontalSpeed(pHorizontalSpeed, pUpdateLayerConfigOnly) {\n        const inValidHorizontal = pHorizontalSpeed && typeof pHorizontalSpeed !== 'number';\n\n        if (inValidHorizontal) {\n            Parallax.logger.prefix('Parallax-Module').warn('Expected a number for \"pHorizontalSpeed\", but received:', typeof pHorizontalSpeed);\n            return\n        }\n\n        this.config.horizontalSpeed = pHorizontalSpeed;\n\n        if (!pUpdateLayerConfigOnly) {\n            const update = (pInstance) => {\n                const parallaxInfo = Parallax.instanceWeakMap.get(pInstance);\n                parallaxInfo.horizontalSpeed = pVerticalSpeed;\n            }\n\n            this.instances.forEach(pInstance => {\n                update(pInstance);\n            });\n            this.backgrounds.forEach(pInstance => {\n                update(pInstance);\n            });\n        }\n    }\n    /**\n     * Updates the vertical speed of the layer.\n     * @param {number} pVerticalSpeed - The new vertical speed. \n     * @param {boolean} pUpdateLayerConfigOnly - If only to update the layer config and not the instance config.\n     */\n    updateVerticalSpeed(pVerticalSpeed, pUpdateLayerConfigOnly) {\n        const inValidVertical = pVerticalSpeed && typeof pVerticalSpeed !== 'number';\n\n        if (inValidVertical) {\n            Parallax.logger.prefix('Parallax-Module').warn('Expected a number for \"pVerticalSpeed\", but received:', typeof pVerticalSpeed);\n            return\n        }\n\n        this.config.verticalSpeed = pVerticalSpeed;\n\n        if (!pUpdateLayerConfigOnly) {\n            const update = (pInstance) => {\n                const parallaxInfo = Parallax.instanceWeakMap.get(pInstance);\n                parallaxInfo.verticalSpeed = pVerticalSpeed;\n            }\n\n            this.instances.forEach(pInstance => {\n                update(pInstance);\n            });\n            this.backgrounds.forEach(pInstance => {\n                update(pInstance);\n            });\n        }\n    }\n    /**\n     * Adds the instance to the parallax layer.\n     * When using this API the instance should already be on the map.\n     * The instance's 'plane' will be changed to match the plane of the layer.\n     * @param {Diob} pInstance - The instance to add to the layer.\n     * @param {Object} pConfig - The personal config of this instance. Akin to the parallax info passed via the `Parallax.add` API.\n     * @prop {number} [pConfig.horizontalSpeed] - The horizontal speed of this instance. (This will be ignored and the layer's speed will be used.)\n     * @prop {number} [pConfig.verticalSpeed] - The vertical speed of this instance. (This will be ignored and the layer's speed will be used.)\n     * @prop {boolean} [pConfig.infiniteHorizontal] - Whether this instance will be treated as a horizontal background and loop seamlessly.\n     * @prop {boolean} [pConfig.infiniteVertical] - Whether this instance will be treated as a vertical background and loop seamlessly.\n     * @prop {number} [pConfig.cameraAnchorX] - The x position of the camera to anchor this instance to.\n     * @prop {number} [pConfig.cameraAnchorY] - The y position of the camera to anchor this instance to.\n     * @prop {boolean} [pConfig.ground] - If this instance is ground. (Should be infinite). Does not need to be on the map beforehand. It will be placed.\n     * @prop {number} [pConfig.groundY] - The y pos of the ground.\n     * @prop {string} [pConfig.groundMapname] - The ground mapname. \n     */\n    add(pInstance, pConfig) {\n        if (this.config.instances.has(pInstance)) return;\n        this.config.instances.add(pInstance);\n        const isGround = pConfig ? pConfig.ground : false;\n        const groundY = isGround ? pConfig.groundY : undefined;\n        const groundMapname = isGround ? pConfig.groundMapname : undefined;\n        const config = {\n            horizontalSpeed: this.config.horizontalSpeed,\n            verticalSpeed: this.config.verticalSpeed,\n            // Not using chaining operator due to the docs parser not supporting it.\n            infiniteHorizontal: pConfig ? (pConfig.infiniteHorizontal ? pConfig.infiniteHorizontal : false) : false,\n            infiniteVertical: pConfig ? (pConfig.infiniteVertical ? pConfig.infiniteVertical : false) : false,\n            cameraAnchorX: pConfig ? (pConfig.cameraAnchorX ? pConfig.cameraAnchorX : undefined) : undefined,\n            cameraAnchorY: pConfig ? (pConfig.cameraAnchorY ? pConfig.cameraAnchorY : undefined) : undefined,\n            ground: isGround,\n            groundY: groundY,\n            groundMapname: groundMapname\n        }\n        pInstance.plane = this.config.plane;\n        Parallax.add(pInstance, config);\n    }\n    /**\n     * Removes the instance from the parallax layer.\n     * @param {Diob} pInstance - The instance to remove from the layer.\n     */\n    remove(pInstance) {\n        this.config.instances.delete(pInstance);\n        Parallax.remove(pInstance);\n    }\n}",
    "static": true,
    "longname": "/Users/doubleactii/Documents/Github/Parallax/src/layer.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "Layer",
    "memberof": "src/layer.mjs",
    "static": true,
    "longname": "src/layer.mjs~Layer",
    "access": "public",
    "export": true,
    "importPath": "parallax/src/layer.mjs",
    "importStyle": "{Layer}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "config",
    "memberof": "src/layer.mjs~Layer",
    "static": false,
    "longname": "src/layer.mjs~Layer#config",
    "access": "private",
    "description": "The configuration object of this layer.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "horizontalSpeed",
        "description": "The horizontal speed of the layer."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "verticalSpeed",
        "description": "The vertical speed of the layer."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "plane",
        "description": "The plane this parallax layer will occupy."
      },
      {
        "nullable": null,
        "types": [
          "Diob[] ",
          " MapObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "backgrounds",
        "description": "An array of instances that will serve as the background. These are automatically toggled to repeat."
      },
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "instances",
        "description": "A set of instances currently on the layer."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/layer.mjs~Layer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layer.mjs~Layer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "updateConfigSpeed",
    "memberof": "src/layer.mjs~Layer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layer.mjs~Layer#updateConfigSpeed",
    "access": "public",
    "description": "Updates the configuration speed of the layer.",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{number} pConfig.horizontalSpeed - The horizontal speed of the layer."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} pConfig.verticalSpeed - The vertical speed of the layer. "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pConfig",
        "description": "The speed configuration of the parallax layer."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pUpdateLayerConfigOnly",
        "description": "If only to update the layer config and not the instance config."
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "updateHorizontalSpeed",
    "memberof": "src/layer.mjs~Layer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layer.mjs~Layer#updateHorizontalSpeed",
    "access": "public",
    "description": "Updates the horizontal speed of this layer.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pHorizontalSpeed",
        "description": "The new horizontal speed."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pUpdateLayerConfigOnly",
        "description": "If only to update the layer config and not the instance config."
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "updateVerticalSpeed",
    "memberof": "src/layer.mjs~Layer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layer.mjs~Layer#updateVerticalSpeed",
    "access": "public",
    "description": "Updates the vertical speed of the layer.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pVerticalSpeed",
        "description": "The new vertical speed."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pUpdateLayerConfigOnly",
        "description": "If only to update the layer config and not the instance config."
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "add",
    "memberof": "src/layer.mjs~Layer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layer.mjs~Layer#add",
    "access": "public",
    "description": "Adds the instance to the parallax layer.\nWhen using this API the instance should already be on the map.\nThe instance's 'plane' will be changed to match the plane of the layer.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.horizontalSpeed] - The horizontal speed of this instance. (This will be ignored and the layer's speed will be used.)"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.verticalSpeed] - The vertical speed of this instance. (This will be ignored and the layer's speed will be used.)"
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} [pConfig.infiniteHorizontal] - Whether this instance will be treated as a horizontal background and loop seamlessly."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} [pConfig.infiniteVertical] - Whether this instance will be treated as a vertical background and loop seamlessly."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.cameraAnchorX] - The x position of the camera to anchor this instance to."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.cameraAnchorY] - The y position of the camera to anchor this instance to."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} [pConfig.ground] - If this instance is ground. (Should be infinite). Does not need to be on the map beforehand. It will be placed."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.groundY] - The y pos of the ground."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} [pConfig.groundMapname] - The ground mapname. "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Diob"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to add to the layer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pConfig",
        "description": "The personal config of this instance. Akin to the parallax info passed via the `Parallax.add` API."
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "remove",
    "memberof": "src/layer.mjs~Layer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layer.mjs~Layer#remove",
    "access": "public",
    "description": "Removes the instance from the parallax layer.",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "Diob"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to remove from the layer."
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/parallax.mjs",
    "content": "import { Logger } from './vendor/logger.min.mjs';\nimport { Layer } from './layer.mjs'\nimport { EventEmitter } from './events.mjs';\n\nclass ParallaxSingleton {\n\t/**\n\t * The version of the module.\n\t */\n\tversion = \"VERSION_REPLACE_ME\";\n    /** The logger module this module uses to log errors / logs\n     * @private\n     * @type {Object}\n     */\n    logger = new Logger();\n    /**\n     * The event emitter.\n     */\n    events = new EventEmitter();\n    /**\n     * The layer class.\n     * @type {Layer}\n     */\n    Layer = Layer;\n    /**\n     * An set of instances that use the parallax system.\n     * @private\n     * @type {Set}\n     */\n    instances = new Set();\n    /**\n     * Weakmap to store info on instances used in this module.\n     * @private\n     * @type {WeakMap}\n     */\n    instanceWeakMap = new WeakMap();\n    /**\n     * The last position of the camera.\n     * @private\n     * @type {x: number | null, y: number | null}\n     */\n    lastCamPos = { x: null, y: null };\n    /**\n     * The virtual position on the map where the layers look natural together.\n     * @private\n     * @type {x: number | null, y: number | null}\n     */\n    cameraAnchor = { x: null, y: null };\n    /**\n     * Whether the anchor y position is set.\n     * @private\n     * @type {boolean}\n     */\n    anchorYSet = false;\n    /**\n     * Whether the anchor x position is set.\n     * @private\n     * @type {boolean}\n     */\n    anchorXSet = false;\n    /**\n     * @private\n     */\n\tconstructor() {\n        this.logger.registerType('Parallax-Module', '#ff6600');\n\t}\n    /**\n     * Gets the camera position.\n     * @returns {{x: number, y: number}} - The camera position.\n     */\n    getCamPos() {\n        const viewEye = VYLO.Client.getViewEye();\n        if (viewEye) {\n            return { x: viewEye.x, y: viewEye.y };\n        }\n        return { x: null, y: null };\n    }\n    /**\n     * Whether the last camera position is set.\n     * @returns {boolean} - Whether the last camera position is set.\n     */\n    hasLastCamPos() {\n        return this.lastCamPos.x !== null && this.lastCamPos.y !== null;\n    }\n    /**\n     * Sets the last camera position.\n     * @param {number} pX - The last x position of the camera.\n     * @param {number} pY - The last y position of the camera.\n     */\n    setLastCamPos(pX, pY) {\n        this.lastCamPos.x = pX;\n        this.lastCamPos.y = pY;\n    }\n    /**\n     * Sets the anchor position for the parallax system.\n     * @param {{ x: number, y: number }} pCameraAnchor - The virtual position on the map where the layers look natural together.\n     */\n    setCameraAnchor(pCameraAnchor) {\n        this.setCameraAnchorX(pCameraAnchor.x);\n        this.setCameraAnchorY(pCameraAnchor.y);\n    }\n    /**\n     * Sets the anchor x position for the parallax system.\n     * @param {number} pXAnchor - The x position to set the anchor to.\n     */\n    setCameraAnchorX(pXAnchor) {\n        this.cameraAnchor.x = pXAnchor;\n        this.anchorXSet = true;\n    }\n    /**\n     * Sets the anchor y position for the parallax system.\n     * @param {number} pYAnchor - The y position to set the anchor to.\n     */\n    setCameraAnchorY(pYAnchor) {\n        this.cameraAnchor.y = pYAnchor;\n        this.anchorYSet = true;\n    }\n    /**\n     * Gets the anchor position.\n     * @returns {{x: number | null, y: number | null}} - The anchor position.\n     */\n    getCameraAnchor() {\n        return { ...this.cameraAnchor };\n    }\n    /**\n     * Gets the anchor x position.\n     * @returns {number | null} - The anchor x position.\n     */\n    getAnchorX() {\n        return this.cameraAnchor.x;\n    }\n    /**\n     * Gets the anchor y position.\n     * @returns {number | null} - The anchor x position.\n     */\n    getAnchorY() {\n        return this.cameraAnchor.y;\n    }\n    /**\n     * Resets the anchor position.\n     */\n    resetAnchor() {\n        this.resetAnchorX();\n        this.resetAnchorY();\n    }\n    /**\n     * Resets the anchor x position.\n     */\n    resetAnchorX() {\n        this.cameraAnchor.x = null;\n        this.anchorXSet = false;\n    }\n    /**\n     * Resets the anchor y position.\n     */\n    resetAnchorY() {\n        this.cameraAnchor.y = null;\n        this.anchorYSet = false;\n    }\n    /**\n     * Whether the anchor x position is set.\n     * @returns {boolean} - Whether the anchor x position is set.\n     */\n    isAnchorXSet() {\n        return this.anchorXSet;\n    }\n    /**\n     * Whether the anchor y position is set.\n     * @returns {boolean} - Whether the anchor y position is set.\n     */\n    isAnchorYSet() {\n        return this.anchorYSet;\n    }\n    /**\n     * Creates two clones of the instance to loop infinitely.\n     * @private\n     * @param {Diob} pInstance - The instance to base the clones off of.\n     * @param {boolean} pBypassEvent - Whether to bypass the onRelocated event.\n     * @returns {Diob[]} - An array of the two clones.\n     */\n    createLoopInstances(pInstance) {\n        // Create a left and right clone\n        const first = VYLO.newDiob('MapObject');\n        const second = VYLO.newDiob('MapObject');\n\n        const children = [first, second];\n\n        first.isCullable = false;\n        second.isCullable = false;\n\n        // Make the left and right clone particle look the same as the initial instance\n        first.setAppearance(pInstance);\n        second.setAppearance(pInstance);\n\n        return children;\n    }\n    /**\n     * Enables infinite looping for the horizontal plane.\n     * @private\n     * @param {Diob} pInstance - The instance to loop.\n     */\n    toggleInfiniteHorizontal(pInstance) {\n        const [left, right] = this.createLoopInstances(pInstance);\n\n        // Position the left clone\n        left.x = pInstance.x - pInstance.icon.width;\n        left.y = pInstance.y;\n        left.mapName = pInstance.mapName;\n\n        // Position the right clone\n        right.x = pInstance.x + pInstance.icon.width;\n        right.y = pInstance.y;\n        right.mapName = pInstance.mapName;\n\n        // Store the clones in a temporary array\n        const children = [left, right];\n        const parallaxConfig = this.instanceWeakMap.get(pInstance);\n\n        // Store the children\n        parallaxConfig.horizontalChildren = children;\n\n        // Loop the clones and store their relative positions to the main instance\n        children.forEach((pChild) => {\n            pChild.relativeX = pChild.x - pInstance.x;\n            pChild.relativeY = pChild.y - pInstance.y;\n        });\n    }\n\n    /**\n     * Enables infinite looping for the vertical plane.\n     * @private\n     * @param {Diob} pInstance - The instance to loop.\n     */\n    toggleInfiniteVertical(pInstance) {\n        const [top, bottom] = this.createLoopInstances(pInstance);\n\n        // Position the left clone\n        top.x = pInstance.x;\n        top.y = pInstance.y - pInstance.icon.height;\n        top.mapName = pInstance.mapName;\n\n        // Position the right clone\n        bottom.x = pInstance.x;\n        bottom.y = pInstance.y + pInstance.icon.height;\n        bottom.mapName = pInstance.mapName;\n\n        // Store the clones in a temporary array\n        const children = [top, bottom];\n        const parallaxConfig = this.instanceWeakMap.get(pInstance);\n\n        // Store the children\n        parallaxConfig.verticalChildren = children;\n\n        // Loop the clones and store their relative positions to the main instance\n        children.forEach((pChild) => {\n            pChild.relativeX = pChild.x - pInstance.x;\n            pChild.relativeY = pChild.y - pInstance.y;\n        });\n    }\n    /**\n     * Toggle infinite looping for both the horizontal and vertical planes.\n     * @private\n     * @param {Diob} pInstance - The instance to loop.\n     */\n    toggleInfinitePlanes(pInstance) {\n        this.toggleInfiniteHorizontal(pInstance);\n        this.toggleInfiniteVertical(pInstance);\n    }\n    /**\n     * Adds an instance to the parallax system.\n     * Call this first and then add your instance to the map.\n     * @private\n     * @param {Object} pInstance - The instance to add to the parallax system.\n     * @param {Object} pConfig - The parallax info that tells this module how to control this instance.\n     * @prop {number} pConfig.horizontalSpeed - The x multiplier for this instance. Controls how fast or slow this instance moves. -Infinity to Infinity. 1 to move with camera.\n     * @prop {number} pConfig.verticalSpeed - The y multiplier for this instance. Controls how fast or slow this instance moves. -Infinity to Infinity. 1 to move with camera.\n     * @prop {boolean} [pConfig.infiniteHorizontal] - Whether this instance will infiniteHorizontal endlessly.\n     * @prop {boolean} [pConfig.infiniteVertical] - Whether this instance will infiniteVertical endlessly.\n     * @prop {number} [pConfig.cameraAnchorX] - The x position of the camera to anchor this instance to.\n     * @prop {number} [pConfig.cameraAnchorY] - The y position of the camera to anchor this instance to.\n     * @prop {boolean} [pConfig.ground] - If this instance is ground.\n     * @prop {number} [pConfig.groundY] - The y pos of the ground.\n     * @prop {string} [pConfig.groundMapname] - The ground mapname.\n     * \n     * ## The following is how the speed of the parallax multipliers are factored in.  \n     (x | y) < 1 = faster behind the camera eg: (-> Player goes this way = Instance goes this way <-)  \n     (x | y) > 1 faster against the camera eg: (-> Player goes this way = Instance goes this way ->)  \n     (x | y) = 0 = static to the camera eg: (-> Player goes this way = Instance does nothing, and moves with the camera)   \n     (x | y) = 1 = moves with the camera eg: (-> Player goes this way = Instance goes this way -> at position of camera)  \n     */\n    add(pInstance, pConfig) {\n        if (!pInstance) {\n            this.logger.prefix('Parallax-Module').error('No pInstance passed!');\n            return;\n        }\n\n        if (pConfig instanceof Object) {\n            if (!this.instances.has(pInstance)) {\n                const { x, y, mapName } = pInstance;\n                // Clone the parallax object\n                const parallaxConfig = { ...pConfig };\n                // Set the parallax info to the instance\n                this.instanceWeakMap.set(pInstance, parallaxConfig);\n                this.instances.add(pInstance);\n                \n                if (typeof x === 'number' && typeof y === 'number' && typeof mapName === 'string') {\n                    pInstance.setPos(x, y, mapName);\n                }\n                this.init(pInstance, parallaxConfig);\n            }\n        } else {\n            this.logger.prefix('Parallax-Module').error('No pConfig passed or invalid type found!');\n        }\n    }\n    /**\n     * Initializes this instance.\n     * @private\n     * @param {Object} pInstance - The instance to initialize.\n     * @param {Object} pConfig - The parallax info that tells this module how to control this instance.\n     * @prop {number} pConfig.horizontalSpeed - The x multiplier for this instance. Controls how fast or slow this instance moves. -Infinity to Infinity. 0 to move with camera.\n     * @prop {number} pConfig.verticalSpeed - The y multiplier for this instance. Controls how fast or slow this instance moves. -Infinity to Infinity. 0 to move with camera.\n     * @prop {boolean} [pConfig.infiniteHorizontal] - Whether this instance will loop endlessly.\n     * @prop {boolean} [pConfig.infiniteVertical] - Whether this instance will loop endlessly.\n     * @prop {number} [pConfig.cameraAnchorX] - The x position of the camera to anchor this instance to.\n     * @prop {number} [pConfig.cameraAnchorY] - The y position of the camera to anchor this instance to.\n     */\n    init(pInstance, pConfig) {\n        if (!VYLO) {\n            this.logger.prefix('Parallax-Module').error('VYLO not found! This module depends on the VYLO object being in the global name space.');\n            return;\n        }\n\n        const { x, y } = this.getCamPos();\n\n        if (!this.hasLastCamPos()) {\n            this.setLastCamPos(x, y);\n        }\n\n        const { ground, groundY, groundMapname, infiniteHorizontal, infiniteVertical } = pConfig;\n\n        if (ground) {\n            pInstance.x = x - pInstance.icon.width / 2;\n            pInstance.y = groundY;\n            pInstance.mapName = groundMapname;\n        } else {\n            // Update the instance's initial position based on the anchor position\n            this.updateInstance(pInstance, x, y, { x: pConfig.cameraAnchorX, y: pConfig.cameraAnchorY });\n        }\n\n        if (infiniteHorizontal && infiniteVertical) {\n            this.toggleInfinitePlanes(pInstance);\n        } else if (infiniteHorizontal) {\n            this.toggleInfiniteHorizontal(pInstance);\n        } else if (infiniteVertical) {\n            this.toggleInfiniteVertical(pInstance);\n        }\n    }\n    /**\n     * Removes an instance to the parallax system.\n     * @param {Object} pInstance - The instance to remove to the parallax system.\n     */\n    remove(pInstance) {\n        if (!pInstance) {\n            this.logger.prefix('Parallax-Module').error('No pInstance passed!');\n            return;\n        }\n\n        if (this.instances.has(pInstance)) {\n            this.instances.delete(pInstance);\n            this.instanceWeakMap.delete(pInstance);\n        }\n    }\n    /**\n     * Updates the parallax system.\n     * @param {number} pCameraX - The x position of the camera.\n     * @param {number} pCameraY - The y position of the camera.\n    */\n    update(pCameraX = 0, pCameraY = 0) {\n        for (const instance of this.instances) {\n            this.updateInstance(instance, pCameraX, pCameraY);\n        }\n\n        this.lastCamPos.x = pCameraX;\n        this.lastCamPos.y = pCameraY;\n    }\n    /**\n     * Updates the instance's position based on the camera's position.\n     * @private\n     * @param {Diob} pInstance - The instance to update.\n     * @param {number} pCameraX - The x position of the camera.\n     * @param {number} pCameraY - The y position of the camera.\n     * @param {{x: number | null, y: number | null}} [pAnchor] - The camera anchor position to use.\n     */\n    updateInstance(pInstance, pCameraX, pCameraY, pAnchor) {\n        const { infiniteHorizontal, infiniteVertical, ground, horizontalSpeed, verticalSpeed } = this.instanceWeakMap.get(pInstance);\n\n        // Move the instance with the camera if the parallax is set to 0\n        const isBackgroundX = !ground && horizontalSpeed === 0;\n        const isBackgroundY = !ground && verticalSpeed === 0;\n\n        let lastCamPosX = this.lastCamPos.x;\n        let lastCamPosY = this.lastCamPos.y;\n\n        if (!ground) {\n            if (pAnchor) {\n                const x = this.getAnchorX() || pAnchor.x;\n                const y = this.getAnchorY() || pAnchor.y;\n    \n                if (typeof x === 'number') {\n                    lastCamPosX = x;\n                }\n    \n                if (typeof y === 'number') {\n                    lastCamPosY = y;\n                }\n            }\n            \n            // Position to set the instance to.\n            let x;\n            let y;\n            if (isBackgroundX) {\n                x = pCameraX - pInstance.icon.width / 2;\n            } else {\n                let deltaX = pCameraX - lastCamPosX;\n                let distX = deltaX * horizontalSpeed;\n                x = pInstance.x + distX;\n            }\n    \n            if (isBackgroundY) {\n                y = pCameraY - pInstance.icon.height / 2;\n            } else {\n                let deltaY = pCameraY - lastCamPosY;\n                let distY = deltaY * verticalSpeed;\n                y = pInstance.y + distY;\n            }\n\n            // Set the position\n            pInstance.x = x;\n            pInstance.y = y;\n        }\n\n        // Logic cannot be ran on static background instances as they should not loop\n        if (!isBackgroundX && !isBackgroundY) {\n            if (infiniteHorizontal) {\n                if (lastCamPosX !== pCameraX) {\n                    // The start pos + total width\n                    const rightEnd = pInstance.x + pInstance.icon.width;\n                    // The start pos - total width / 6\n                    const leftEnd = Math.floor(pInstance.x - pInstance.icon.width / 6);\n\n                    if (pCameraX > rightEnd) {\n                        pInstance.x += pInstance.icon.width;\n                    } else if (pCameraX < leftEnd) {\n                        pInstance.x -= pInstance.icon.width;\n                    }\n                }\n            }\n\n            if (infiniteVertical) {\n                if (lastCamPosY !== pCameraY) {\n                    // The start pos + total height\n                    const bottomEnd = pInstance.y + pInstance.icon.height;\n                    // The start pos - total height / 6\n                    const topEnd = Math.floor(pInstance.y - pInstance.icon.height / 6);\n\n                    if (pCameraY > bottomEnd) {\n                        pInstance.y += pInstance.icon.height;\n                    } else if (pCameraY < topEnd) {\n                        pInstance.y -= pInstance.icon.height;\n                    }\n                }\n            }\n        }\n\n        const infinite = infiniteHorizontal || infiniteHorizontal;\n        // If this has children, we need to update the children when it moves.\n\n        if (pInstance._parallaxOldX !== pInstance.x || pInstance._parallaxOldY !== pInstance.y) {\n            if (infinite) {\n                this.handleOnRelocated(pInstance);\n            }\n            this.events.emit(pInstance, 'MoveEvent');\n        }\n\n        pInstance._parallaxOldX = pInstance.x; \n        pInstance._parallaxOldY = pInstance.y;\n    }\n    /**\n     * Handles the onRelocated event for instances. Moves their children in relativity to their position.\n     * @private\n     * @param {Diob | MapObject} pInstance - The instance to handle the event for.\n     */\n    handleOnRelocated(pInstance) {\n        const { verticalChildren, horizontalChildren } = this.instanceWeakMap.get(pInstance);\n\n        // Update the children's position when the parent moves\n        if (Array.isArray(verticalChildren)) {\n            verticalChildren.forEach((pChild) => {\n                pChild.x = pInstance.x + pChild.relativeX;\n                pChild.y = pInstance.y + pChild.relativeY;\n            });\n        }\n\n        if (Array.isArray(horizontalChildren)) {\n            horizontalChildren.forEach((pChild) => {\n                pChild.x = pInstance.x + pChild.relativeX;\n                pChild.y = pInstance.y + pChild.relativeY;\n            });\n        }\n    }\n}\n\nconst Parallax = new ParallaxSingleton();\nexport { Parallax };",
    "static": true,
    "longname": "/Users/doubleactii/Documents/Github/Parallax/src/parallax.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "Parallax",
    "memberof": "src/parallax.mjs",
    "static": true,
    "longname": "src/parallax.mjs~Parallax",
    "access": "public",
    "export": true,
    "importPath": "parallax",
    "importStyle": "{Parallax}",
    "description": null,
    "lineNumber": 512,
    "undocument": true,
    "type": {
      "types": [
        "src/parallax.mjs~ParallaxSingleton"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "ParallaxSingleton",
    "memberof": "src/parallax.mjs",
    "static": true,
    "longname": "src/parallax.mjs~ParallaxSingleton",
    "access": "public",
    "export": true,
    "importPath": "parallax",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "version",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#version",
    "access": "public",
    "description": "The version of the module.",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "logger",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#logger",
    "access": "private",
    "description": "The logger module this module uses to log errors / logs",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "events",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#events",
    "access": "public",
    "description": "The event emitter.",
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "Layer",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#Layer",
    "access": "public",
    "description": "The layer class.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Layer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "instances",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#instances",
    "access": "private",
    "description": "An set of instances that use the parallax system.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "instanceWeakMap",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#instanceWeakMap",
    "access": "private",
    "description": "Weakmap to store info on instances used in this module.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "lastCamPos",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#lastCamPos",
    "access": "private",
    "description": "The last position of the camera.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "x: number ",
        " null, y: number ",
        " null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "cameraAnchor",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#cameraAnchor",
    "access": "private",
    "description": "The virtual position on the map where the layers look natural together.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "x: number ",
        " null, y: number ",
        " null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "anchorYSet",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#anchorYSet",
    "access": "private",
    "description": "Whether the anchor y position is set.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "anchorXSet",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#anchorXSet",
    "access": "private",
    "description": "Whether the anchor x position is set.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 63
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "getCamPos",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#getCamPos",
    "access": "public",
    "description": "Gets the camera position.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{x: number, y: number}} - The camera position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{x: number, y: number}"
      ],
      "spread": false,
      "description": "The camera position."
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "hasLastCamPos",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#hasLastCamPos",
    "access": "public",
    "description": "Whether the last camera position is set.",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Whether the last camera position is set."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the last camera position is set."
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "setLastCamPos",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#setLastCamPos",
    "access": "public",
    "description": "Sets the last camera position.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pX",
        "description": "The last x position of the camera."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pY",
        "description": "The last y position of the camera."
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "setCameraAnchor",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#setCameraAnchor",
    "access": "public",
    "description": "Sets the anchor position for the parallax system.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "{ x: number, y: number }"
        ],
        "spread": false,
        "optional": false,
        "name": "pCameraAnchor",
        "description": "The virtual position on the map where the layers look natural together."
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "setCameraAnchorX",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#setCameraAnchorX",
    "access": "public",
    "description": "Sets the anchor x position for the parallax system.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pXAnchor",
        "description": "The x position to set the anchor to."
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "setCameraAnchorY",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#setCameraAnchorY",
    "access": "public",
    "description": "Sets the anchor y position for the parallax system.",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pYAnchor",
        "description": "The y position to set the anchor to."
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "getCameraAnchor",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#getCameraAnchor",
    "access": "public",
    "description": "Gets the anchor position.",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{x: number | null, y: number | null}} - The anchor position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{x: number | null, y: number | null}"
      ],
      "spread": false,
      "description": "The anchor position."
    },
    "params": []
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "getAnchorX",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#getAnchorX",
    "access": "public",
    "description": "Gets the anchor x position.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number | null} - The anchor x position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number ",
        " null"
      ],
      "spread": false,
      "description": "The anchor x position."
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "getAnchorY",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#getAnchorY",
    "access": "public",
    "description": "Gets the anchor y position.",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number | null} - The anchor x position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number ",
        " null"
      ],
      "spread": false,
      "description": "The anchor x position."
    },
    "params": []
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "resetAnchor",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#resetAnchor",
    "access": "public",
    "description": "Resets the anchor position.",
    "lineNumber": 141,
    "params": [],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "resetAnchorX",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#resetAnchorX",
    "access": "public",
    "description": "Resets the anchor x position.",
    "lineNumber": 148,
    "params": [],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "resetAnchorY",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#resetAnchorY",
    "access": "public",
    "description": "Resets the anchor y position.",
    "lineNumber": 155,
    "params": [],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "isAnchorXSet",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#isAnchorXSet",
    "access": "public",
    "description": "Whether the anchor x position is set.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Whether the anchor x position is set."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the anchor x position is set."
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "isAnchorYSet",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#isAnchorYSet",
    "access": "public",
    "description": "Whether the anchor y position is set.",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Whether the anchor y position is set."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the anchor y position is set."
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "createLoopInstances",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#createLoopInstances",
    "access": "private",
    "description": "Creates two clones of the instance to loop infinitely.",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Diob[]} - An array of the two clones."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Diob"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to base the clones off of."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pBypassEvent",
        "description": "Whether to bypass the onRelocated event."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Diob[]"
      ],
      "spread": false,
      "description": "An array of the two clones."
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "toggleInfiniteHorizontal",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#toggleInfiniteHorizontal",
    "access": "private",
    "description": "Enables infinite looping for the horizontal plane.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "Diob"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to loop."
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "toggleInfiniteVertical",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#toggleInfiniteVertical",
    "access": "private",
    "description": "Enables infinite looping for the vertical plane.",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "Diob"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to loop."
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "toggleInfinitePlanes",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#toggleInfinitePlanes",
    "access": "private",
    "description": "Toggle infinite looping for both the horizontal and vertical planes.",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "Diob"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to loop."
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "add",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#add",
    "access": "private",
    "description": "Adds an instance to the parallax system.\nCall this first and then add your instance to the map.",
    "lineNumber": 290,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{number} pConfig.horizontalSpeed - The x multiplier for this instance. Controls how fast or slow this instance moves. -Infinity to Infinity. 1 to move with camera."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} pConfig.verticalSpeed - The y multiplier for this instance. Controls how fast or slow this instance moves. -Infinity to Infinity. 1 to move with camera."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} [pConfig.infiniteHorizontal] - Whether this instance will infiniteHorizontal endlessly."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} [pConfig.infiniteVertical] - Whether this instance will infiniteVertical endlessly."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.cameraAnchorX] - The x position of the camera to anchor this instance to."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.cameraAnchorY] - The y position of the camera to anchor this instance to."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} [pConfig.ground] - If this instance is ground."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.groundY] - The y pos of the ground."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} [pConfig.groundMapname] - The ground mapname.\n\n## The following is how the speed of the parallax multipliers are factored in.  \n(x | y) < 1 = faster behind the camera eg: (-> Player goes this way = Instance goes this way <-)  \n(x | y) > 1 faster against the camera eg: (-> Player goes this way = Instance goes this way ->)  \n(x | y) = 0 = static to the camera eg: (-> Player goes this way = Instance does nothing, and moves with the camera)   \n(x | y) = 1 = moves with the camera eg: (-> Player goes this way = Instance goes this way -> at position of camera)  "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to add to the parallax system."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pConfig",
        "description": "The parallax info that tells this module how to control this instance."
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "init",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#init",
    "access": "private",
    "description": "Initializes this instance.",
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{number} pConfig.horizontalSpeed - The x multiplier for this instance. Controls how fast or slow this instance moves. -Infinity to Infinity. 0 to move with camera."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} pConfig.verticalSpeed - The y multiplier for this instance. Controls how fast or slow this instance moves. -Infinity to Infinity. 0 to move with camera."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} [pConfig.infiniteHorizontal] - Whether this instance will loop endlessly."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} [pConfig.infiniteVertical] - Whether this instance will loop endlessly."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.cameraAnchorX] - The x position of the camera to anchor this instance to."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} [pConfig.cameraAnchorY] - The y position of the camera to anchor this instance to."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to initialize."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pConfig",
        "description": "The parallax info that tells this module how to control this instance."
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "remove",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#remove",
    "access": "public",
    "description": "Removes an instance to the parallax system.",
    "lineNumber": 361,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to remove to the parallax system."
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "update",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#update",
    "access": "public",
    "description": "Updates the parallax system.",
    "lineNumber": 377,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pCameraX",
        "description": "The x position of the camera."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pCameraY",
        "description": "The y position of the camera."
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "updateInstance",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#updateInstance",
    "access": "private",
    "description": "Updates the instance's position based on the camera's position.",
    "lineNumber": 393,
    "params": [
      {
        "nullable": null,
        "types": [
          "Diob"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to update."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pCameraX",
        "description": "The x position of the camera."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pCameraY",
        "description": "The y position of the camera."
      },
      {
        "nullable": null,
        "types": [
          "{x: number | null, y: number | null}"
        ],
        "spread": false,
        "optional": true,
        "name": "pAnchor",
        "description": "The camera anchor position to use."
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "handleOnRelocated",
    "memberof": "src/parallax.mjs~ParallaxSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parallax.mjs~ParallaxSingleton#handleOnRelocated",
    "access": "private",
    "description": "Handles the onRelocated event for instances. Moves their children in relativity to their position.",
    "lineNumber": 492,
    "params": [
      {
        "nullable": null,
        "types": [
          "Diob ",
          " MapObject"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to handle the event for."
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Parallax Module \nA parallax module that will enable effortless integration of depth effects into your game.\n\n## Installation\n\n### ES Module\n\n```js\nimport { Parallax } from './parallax.mjs';\n```\n\n### IIFE (Immediately Invoked Function Expression)\n\n```js\n<script src=\"parallax.js\"></script>;\n// ...\nwindow.ParallaxBundle.Parallax;\n```\n\n### Global Dependency\n\nParallax relies on the `VYLO` variable being globally accessible.\n",
    "longname": "/Users/doubleactii/Documents/Github/Parallax/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"parallax\",\n  \"version\": \"1.3.1\",\n  \"description\": \"A parallax module that will enable effortless integration of depth effects into your game.\",\n  \"main\": \"src/parallax.mjs\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build:rollup\": \"npx rollup -c\",\n    \"build:docs\": \"esdoc -c esdoc.json\",\n    \"build:dist\": \"npm run build:rollup && npm run build:docs\"\n  },\n  \"keywords\": [],\n  \"author\": \"https://github.com/doubleactii\",\n  \"license\": \"SEE LICENSE IN LICENSE.md\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/EvitcaStudio/Parallax\"\n  },\n  \"devDependencies\": {\n    \"@rollup/plugin-babel\": \"^6.0.4\",\n    \"@rollup/plugin-terser\": \"^0.4.4\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"rollup\": \"^4.14.1\",\n    \"rollup-plugin-banner2\": \"^1.2.3\",\n    \"rollup-plugin-cleandir\": \"^2.0.0\",\n    \"rollup-plugin-replace\": \"^2.2.0\"\n  }\n}\n",
    "longname": "/Users/doubleactii/Documents/Github/Parallax/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]